
Kkobugi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000082c  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000008c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f49  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7b  00000000  00000000  00001945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000899  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000456  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000389e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6e d0       	rcall	.+220    	; 0x1a0 <main>
  c4:	b1 c3       	rjmp	.+1890   	; 0x828 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KKOBUGI_go>:
		KKOBUGI_start_drawing();
}

// 그리고 있는지와 무관하게 회전한다.
void KKOBUGI_turn(int degree) {
	__KKOBUGI_turn(degree, FALSE);
  c8:	bc 01       	movw	r22, r24
  ca:	99 0f       	add	r25, r25
  cc:	88 0b       	sbc	r24, r24
  ce:	99 0b       	sbc	r25, r25
  d0:	73 d2       	rcall	.+1254   	; 0x5b8 <__floatsisf>
  d2:	61 d3       	rcall	.+1730   	; 0x796 <round>
  d4:	3e d2       	rcall	.+1148   	; 0x552 <__fixsfsi>
  d6:	dc 01       	movw	r26, r24
  d8:	cb 01       	movw	r24, r22
  da:	bc 01       	movw	r22, r24
  dc:	a5 c0       	rjmp	.+330    	; 0x228 <STEPPER_step>
  de:	08 95       	ret

000000e0 <KKOBUGI_start_drawing>:
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
  e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	78 c0       	rjmp	.+240    	; 0x1e2 <SERVO_rotate>
  f2:	08 95       	ret

000000f4 <KKOBUGI_stop_drawing>:
  f4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
  f8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
  fc:	8d e2       	ldi	r24, 0x2D	; 45
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	70 c0       	rjmp	.+224    	; 0x1e2 <SERVO_rotate>
 102:	08 95       	ret

00000104 <KKOBUGI_init>:
 104:	5b d0       	rcall	.+182    	; 0x1bc <SERVO_init>
 106:	8b d0       	rcall	.+278    	; 0x21e <STEPPER_init>
 108:	f5 cf       	rjmp	.-22     	; 0xf4 <KKOBUGI_stop_drawing>
 10a:	08 95       	ret

0000010c <__KKOBUGI_turn>:
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
 116:	67 2b       	or	r22, r23
 118:	51 f0       	breq	.+20     	; 0x12e <__KKOBUGI_turn+0x22>
 11a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 11e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 122:	89 2b       	or	r24, r25
 124:	39 f0       	breq	.+14     	; 0x134 <__KKOBUGI_turn+0x28>
 126:	e6 df       	rcall	.-52     	; 0xf4 <KKOBUGI_stop_drawing>
 128:	01 e0       	ldi	r16, 0x01	; 1
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	05 c0       	rjmp	.+10     	; 0x138 <__KKOBUGI_turn+0x2c>
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <__KKOBUGI_turn+0x2c>
 134:	00 e0       	ldi	r16, 0x00	; 0
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	be 01       	movw	r22, r28
 13a:	dd 0f       	add	r29, r29
 13c:	88 0b       	sbc	r24, r24
 13e:	99 0b       	sbc	r25, r25
 140:	3b d2       	rcall	.+1142   	; 0x5b8 <__floatsisf>
 142:	2d ec       	ldi	r18, 0xCD	; 205
 144:	3c ec       	ldi	r19, 0xCC	; 204
 146:	4c e2       	ldi	r20, 0x2C	; 44
 148:	50 e4       	ldi	r21, 0x40	; 64
 14a:	c2 d2       	rcall	.+1412   	; 0x6d0 <__mulsf3>
 14c:	24 d3       	rcall	.+1608   	; 0x796 <round>
 14e:	01 d2       	rcall	.+1026   	; 0x552 <__fixsfsi>
 150:	dc 01       	movw	r26, r24
 152:	cb 01       	movw	r24, r22
 154:	66 27       	eor	r22, r22
 156:	77 27       	eor	r23, r23
 158:	68 1b       	sub	r22, r24
 15a:	79 0b       	sbc	r23, r25
 15c:	65 d0       	rcall	.+202    	; 0x228 <STEPPER_step>
 15e:	01 2b       	or	r16, r17
 160:	09 f0       	breq	.+2      	; 0x164 <__KKOBUGI_turn+0x58>
 162:	be df       	rcall	.-132    	; 0xe0 <KKOBUGI_start_drawing>
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <KKOBUGI_turn_with_pause>:
}

// 그리고 있다면 잠깐 펜을 들고 회전하고, 다시 펜을 내린다.
void KKOBUGI_turn_with_pause(int degree) {
	__KKOBUGI_turn(degree, TRUE);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	cc cf       	rjmp	.-104    	; 0x10c <__KKOBUGI_turn>
 174:	08 95       	ret

00000176 <draw>:
	_delay_ms(3000);
	
	draw();
}

void draw() {
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	//	KKOBUGI_go(-40);
	//}
	//KKOBUGI_turn(+45);
	//KKOBUGI_go(-60);
	
	KKOBUGI_start_drawing();
 17a:	b2 df       	rcall	.-156    	; 0xe0 <KKOBUGI_start_drawing>
	
	for (i = 360/12; i--; ) {
 17c:	8e e1       	ldi	r24, 0x1E	; 30
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	07 c0       	rjmp	.+14     	; 0x190 <draw+0x1a>
		KKOBUGI_go(20);
 182:	84 e1       	ldi	r24, 0x14	; 20
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	a0 df       	rcall	.-192    	; 0xc8 <KKOBUGI_go>
		KKOBUGI_turn_with_pause(+12);
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	f0 df       	rcall	.-32     	; 0x16e <KKOBUGI_turn_with_pause>
	//KKOBUGI_turn(+45);
	//KKOBUGI_go(-60);
	
	KKOBUGI_start_drawing();
	
	for (i = 360/12; i--; ) {
 18e:	ce 01       	movw	r24, r28
 190:	ec 01       	movw	r28, r24
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	89 2b       	or	r24, r25
		KKOBUGI_go(20);
		KKOBUGI_turn_with_pause(+12);
	}
	
	KKOBUGI_stop_drawing();
 196:	a9 f7       	brne	.-22     	; 0x182 <draw+0xc>
 198:	ad df       	rcall	.-166    	; 0xf4 <KKOBUGI_stop_drawing>
	//	KKOBUGI_turn_with_pause(-36);
	//	KKOBUGI_go(-100);
	//	KKOBUGI_turn_with_pause(108);
	//}
	//KKOBUGI_stop_drawing();
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <main>:
#include "kkobugi.h"

void draw();

int main(void) {
	KKOBUGI_init();
 1a0:	b1 df       	rcall	.-158    	; 0x104 <KKOBUGI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	8b e7       	ldi	r24, 0x7B	; 123
 1a6:	92 e9       	ldi	r25, 0x92	; 146
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x12>
	_delay_ms(3000);
	
	draw();
 1b2:	00 00       	nop
 1b4:	e0 df       	rcall	.-64     	; 0x176 <draw>
}
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	08 95       	ret

000001bc <SERVO_init>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <avr/io.h>
#include <util/delay.h>

void SERVO_init() {
	DDRB|=0x20;
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	87 bb       	out	0x17, r24	; 23
	PORTB|=0x20;
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	88 bb       	out	0x18, r24	; 24

	TCCR1A=0x82;
 1c8:	82 e8       	ldi	r24, 0x82	; 130
 1ca:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=0x1b;
 1cc:	8b e1       	ldi	r24, 0x1B	; 27
 1ce:	8e bd       	out	0x2e, r24	; 46
	ICR1=4999;     //TOP 0부터 시작
 1d0:	87 e8       	ldi	r24, 0x87	; 135
 1d2:	93 e1       	ldi	r25, 0x13	; 19
 1d4:	97 bd       	out	0x27, r25	; 39
 1d6:	86 bd       	out	0x26, r24	; 38
	
	OCR1A=375;     //0도 375, 90도 625
 1d8:	87 e7       	ldi	r24, 0x77	; 119
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	9b bd       	out	0x2b, r25	; 43
 1de:	8a bd       	out	0x2a, r24	; 42
 1e0:	08 95       	ret

000001e2 <SERVO_rotate>:
}

void SERVO_rotate(int degree) {
	OCR1A = 375 + round(degree * (2.7778f));
 1e2:	bc 01       	movw	r22, r24
 1e4:	99 0f       	add	r25, r25
 1e6:	88 0b       	sbc	r24, r24
 1e8:	99 0b       	sbc	r25, r25
 1ea:	e6 d1       	rcall	.+972    	; 0x5b8 <__floatsisf>
 1ec:	2a e7       	ldi	r18, 0x7A	; 122
 1ee:	37 ec       	ldi	r19, 0xC7	; 199
 1f0:	41 e3       	ldi	r20, 0x31	; 49
 1f2:	50 e4       	ldi	r21, 0x40	; 64
 1f4:	6d d2       	rcall	.+1242   	; 0x6d0 <__mulsf3>
 1f6:	cf d2       	rcall	.+1438   	; 0x796 <round>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e8       	ldi	r19, 0x80	; 128
 1fc:	4b eb       	ldi	r20, 0xBB	; 187
 1fe:	53 e4       	ldi	r21, 0x43	; 67
 200:	44 d1       	rcall	.+648    	; 0x48a <__addsf3>
 202:	ac d1       	rcall	.+856    	; 0x55c <__fixunssfsi>
 204:	7b bd       	out	0x2b, r23	; 43
 206:	6a bd       	out	0x2a, r22	; 42
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 208:	88 e8       	ldi	r24, 0x88	; 136
 20a:	93 e1       	ldi	r25, 0x13	; 19
 20c:	05 c0       	rjmp	.+10     	; 0x218 <SERVO_rotate+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20e:	e8 e2       	ldi	r30, 0x28	; 40
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <SERVO_rotate+0x30>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 216:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	c9 f7       	brne	.-14     	; 0x20e <SERVO_rotate+0x2c>
	_delay_ms(500);
}
 21c:	08 95       	ret

0000021e <STEPPER_init>:
	0b0110,
	0b1100,
};

void STEPPER_init() {
	L_DDR= 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	82 b9       	out	0x02, r24	; 2
	R_DDR= 0xFF;
 222:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 226:	08 95       	ret

00000228 <STEPPER_step>:
}

void STEPPER_step(int left_step, int right_step) {
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	2e 97       	sbiw	r28, 0x0e	; 14
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
	
	int left_step_abs = left_step >= 0 ? left_step : -left_step;
 240:	ac 01       	movw	r20, r24
 242:	99 23       	and	r25, r25
 244:	24 f4       	brge	.+8      	; 0x24e <STEPPER_step+0x26>
 246:	44 27       	eor	r20, r20
 248:	55 27       	eor	r21, r21
 24a:	48 1b       	sub	r20, r24
 24c:	59 0b       	sbc	r21, r25
	int right_step_abs = right_step >= 0 ? right_step : -right_step;
 24e:	9b 01       	movw	r18, r22
 250:	77 23       	and	r23, r23
 252:	24 f4       	brge	.+8      	; 0x25c <STEPPER_step+0x34>
 254:	22 27       	eor	r18, r18
 256:	33 27       	eor	r19, r19
 258:	26 1b       	sub	r18, r22
 25a:	37 0b       	sbc	r19, r23
 25c:	f9 01       	movw	r30, r18
	
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
 25e:	8a 01       	movw	r16, r20
 260:	42 17       	cp	r20, r18
 262:	53 07       	cpc	r21, r19
 264:	0c f4       	brge	.+2      	; 0x268 <STEPPER_step+0x40>
 266:	89 01       	movw	r16, r18
	
	for (volatile int i = 0; i < max_step; i ++) {
 268:	1e 86       	std	Y+14, r1	; 0x0e
 26a:	1d 86       	std	Y+13, r1	; 0x0d
 26c:	fc c0       	rjmp	.+504    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		for (volatile int j = 0, k = 3; j < 4 && k >= 0; j++, k--) {
 26e:	1c 86       	std	Y+12, r1	; 0x0c
 270:	1b 86       	std	Y+11, r1	; 0x0b
 272:	23 e0       	ldi	r18, 0x03	; 3
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	3a 87       	std	Y+10, r19	; 0x0a
 278:	29 87       	std	Y+9, r18	; 0x09
 27a:	e5 c0       	rjmp	.+458    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			// left
			if (i < left_step_abs) {
 27c:	2d 85       	ldd	r18, Y+13	; 0x0d
 27e:	3e 85       	ldd	r19, Y+14	; 0x0e
 280:	24 17       	cp	r18, r20
 282:	35 07       	cpc	r19, r21
 284:	0c f0       	brlt	.+2      	; 0x288 <STEPPER_step+0x60>
 286:	62 c0       	rjmp	.+196    	; 0x34c <STEPPER_step+0x124>
				L_PORT = 0x00;
 288:	13 b8       	out	0x03, r1	; 3
				volatile int q = left_step > 0 ? j%4 : k%4;
 28a:	18 16       	cp	r1, r24
 28c:	19 06       	cpc	r1, r25
 28e:	6c f4       	brge	.+26     	; 0x2aa <STEPPER_step+0x82>
 290:	2b 85       	ldd	r18, Y+11	; 0x0b
 292:	3c 85       	ldd	r19, Y+12	; 0x0c
 294:	23 70       	andi	r18, 0x03	; 3
 296:	30 78       	andi	r19, 0x80	; 128
 298:	33 23       	and	r19, r19
 29a:	9c f4       	brge	.+38     	; 0x2c2 <STEPPER_step+0x9a>
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	31 09       	sbc	r19, r1
 2a0:	2c 6f       	ori	r18, 0xFC	; 252
 2a2:	3f 6f       	ori	r19, 0xFF	; 255
 2a4:	2f 5f       	subi	r18, 0xFF	; 255
 2a6:	3f 4f       	sbci	r19, 0xFF	; 255
 2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <STEPPER_step+0x9a>
 2aa:	29 85       	ldd	r18, Y+9	; 0x09
 2ac:	3a 85       	ldd	r19, Y+10	; 0x0a
 2ae:	23 70       	andi	r18, 0x03	; 3
 2b0:	30 78       	andi	r19, 0x80	; 128
 2b2:	33 23       	and	r19, r19
 2b4:	34 f4       	brge	.+12     	; 0x2c2 <STEPPER_step+0x9a>
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	31 09       	sbc	r19, r1
 2ba:	2c 6f       	ori	r18, 0xFC	; 252
 2bc:	3f 6f       	ori	r19, 0xFF	; 255
 2be:	2f 5f       	subi	r18, 0xFF	; 255
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	38 87       	std	Y+8, r19	; 0x08
 2c4:	2f 83       	std	Y+7, r18	; 0x07
				
				volatile unsigned int val = 0x00;
 2c6:	1e 82       	std	Y+6, r1	; 0x06
 2c8:	1d 82       	std	Y+5, r1	; 0x05
				
				if (full_pattern[q] & 0x8) val |= L_A;
 2ca:	2f 81       	ldd	r18, Y+7	; 0x07
 2cc:	38 85       	ldd	r19, Y+8	; 0x08
 2ce:	22 0f       	add	r18, r18
 2d0:	33 1f       	adc	r19, r19
 2d2:	d9 01       	movw	r26, r18
 2d4:	a0 50       	subi	r26, 0x00	; 0
 2d6:	bf 4f       	sbci	r27, 0xFF	; 255
 2d8:	2c 91       	ld	r18, X
 2da:	23 ff       	sbrs	r18, 3
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <STEPPER_step+0xc0>
 2de:	2d 81       	ldd	r18, Y+5	; 0x05
 2e0:	3e 81       	ldd	r19, Y+6	; 0x06
 2e2:	20 68       	ori	r18, 0x80	; 128
 2e4:	3e 83       	std	Y+6, r19	; 0x06
 2e6:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x4) val |= L_B;
 2e8:	2f 81       	ldd	r18, Y+7	; 0x07
 2ea:	38 85       	ldd	r19, Y+8	; 0x08
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	d9 01       	movw	r26, r18
 2f2:	a0 50       	subi	r26, 0x00	; 0
 2f4:	bf 4f       	sbci	r27, 0xFF	; 255
 2f6:	2c 91       	ld	r18, X
 2f8:	22 ff       	sbrs	r18, 2
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <STEPPER_step+0xde>
 2fc:	2d 81       	ldd	r18, Y+5	; 0x05
 2fe:	3e 81       	ldd	r19, Y+6	; 0x06
 300:	20 62       	ori	r18, 0x20	; 32
 302:	3e 83       	std	Y+6, r19	; 0x06
 304:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x2) val |= L_C;
 306:	2f 81       	ldd	r18, Y+7	; 0x07
 308:	38 85       	ldd	r19, Y+8	; 0x08
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	d9 01       	movw	r26, r18
 310:	a0 50       	subi	r26, 0x00	; 0
 312:	bf 4f       	sbci	r27, 0xFF	; 255
 314:	2c 91       	ld	r18, X
 316:	21 ff       	sbrs	r18, 1
 318:	05 c0       	rjmp	.+10     	; 0x324 <STEPPER_step+0xfc>
 31a:	2d 81       	ldd	r18, Y+5	; 0x05
 31c:	3e 81       	ldd	r19, Y+6	; 0x06
 31e:	20 64       	ori	r18, 0x40	; 64
 320:	3e 83       	std	Y+6, r19	; 0x06
 322:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x1) val |= L_D;
 324:	2f 81       	ldd	r18, Y+7	; 0x07
 326:	38 85       	ldd	r19, Y+8	; 0x08
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	d9 01       	movw	r26, r18
 32e:	a0 50       	subi	r26, 0x00	; 0
 330:	bf 4f       	sbci	r27, 0xFF	; 255
 332:	2c 91       	ld	r18, X
 334:	20 ff       	sbrs	r18, 0
 336:	05 c0       	rjmp	.+10     	; 0x342 <STEPPER_step+0x11a>
 338:	2d 81       	ldd	r18, Y+5	; 0x05
 33a:	3e 81       	ldd	r19, Y+6	; 0x06
 33c:	20 61       	ori	r18, 0x10	; 16
 33e:	3e 83       	std	Y+6, r19	; 0x06
 340:	2d 83       	std	Y+5, r18	; 0x05
				
				L_PORT |= val;
 342:	2d 81       	ldd	r18, Y+5	; 0x05
 344:	3e 81       	ldd	r19, Y+6	; 0x06
 346:	33 b1       	in	r19, 0x03	; 3
 348:	23 2b       	or	r18, r19
 34a:	23 b9       	out	0x03, r18	; 3
			}
			
			// right
			if (i < right_step_abs) {
 34c:	2d 85       	ldd	r18, Y+13	; 0x0d
 34e:	3e 85       	ldd	r19, Y+14	; 0x0e
 350:	2e 17       	cp	r18, r30
 352:	3f 07       	cpc	r19, r31
 354:	0c f0       	brlt	.+2      	; 0x358 <STEPPER_step+0x130>
 356:	65 c0       	rjmp	.+202    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
				R_PORT = 0x00;
 358:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
				volatile int q = right_step > 0 ? j%4 : k%4;
 35c:	16 16       	cp	r1, r22
 35e:	17 06       	cpc	r1, r23
 360:	6c f4       	brge	.+26     	; 0x37c <STEPPER_step+0x154>
 362:	2b 85       	ldd	r18, Y+11	; 0x0b
 364:	3c 85       	ldd	r19, Y+12	; 0x0c
 366:	23 70       	andi	r18, 0x03	; 3
 368:	30 78       	andi	r19, 0x80	; 128
 36a:	33 23       	and	r19, r19
 36c:	9c f4       	brge	.+38     	; 0x394 <STEPPER_step+0x16c>
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	31 09       	sbc	r19, r1
 372:	2c 6f       	ori	r18, 0xFC	; 252
 374:	3f 6f       	ori	r19, 0xFF	; 255
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	0c c0       	rjmp	.+24     	; 0x394 <STEPPER_step+0x16c>
 37c:	29 85       	ldd	r18, Y+9	; 0x09
 37e:	3a 85       	ldd	r19, Y+10	; 0x0a
 380:	23 70       	andi	r18, 0x03	; 3
 382:	30 78       	andi	r19, 0x80	; 128
 384:	33 23       	and	r19, r19
 386:	34 f4       	brge	.+12     	; 0x394 <STEPPER_step+0x16c>
 388:	21 50       	subi	r18, 0x01	; 1
 38a:	31 09       	sbc	r19, r1
 38c:	2c 6f       	ori	r18, 0xFC	; 252
 38e:	3f 6f       	ori	r19, 0xFF	; 255
 390:	2f 5f       	subi	r18, 0xFF	; 255
 392:	3f 4f       	sbci	r19, 0xFF	; 255
 394:	3c 83       	std	Y+4, r19	; 0x04
 396:	2b 83       	std	Y+3, r18	; 0x03
				
				volatile unsigned int val = 0x00;
 398:	1a 82       	std	Y+2, r1	; 0x02
 39a:	19 82       	std	Y+1, r1	; 0x01
				
				if (full_pattern[q] & 0x8) val |= R_A;
 39c:	2b 81       	ldd	r18, Y+3	; 0x03
 39e:	3c 81       	ldd	r19, Y+4	; 0x04
 3a0:	22 0f       	add	r18, r18
 3a2:	33 1f       	adc	r19, r19
 3a4:	d9 01       	movw	r26, r18
 3a6:	a0 50       	subi	r26, 0x00	; 0
 3a8:	bf 4f       	sbci	r27, 0xFF	; 255
 3aa:	2c 91       	ld	r18, X
 3ac:	23 ff       	sbrs	r18, 3
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <STEPPER_step+0x192>
 3b0:	29 81       	ldd	r18, Y+1	; 0x01
 3b2:	3a 81       	ldd	r19, Y+2	; 0x02
 3b4:	21 60       	ori	r18, 0x01	; 1
 3b6:	3a 83       	std	Y+2, r19	; 0x02
 3b8:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x4) val |= R_B;
 3ba:	2b 81       	ldd	r18, Y+3	; 0x03
 3bc:	3c 81       	ldd	r19, Y+4	; 0x04
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	d9 01       	movw	r26, r18
 3c4:	a0 50       	subi	r26, 0x00	; 0
 3c6:	bf 4f       	sbci	r27, 0xFF	; 255
 3c8:	2c 91       	ld	r18, X
 3ca:	22 ff       	sbrs	r18, 2
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <STEPPER_step+0x1b0>
 3ce:	29 81       	ldd	r18, Y+1	; 0x01
 3d0:	3a 81       	ldd	r19, Y+2	; 0x02
 3d2:	24 60       	ori	r18, 0x04	; 4
 3d4:	3a 83       	std	Y+2, r19	; 0x02
 3d6:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x2) val |= R_C;
 3d8:	2b 81       	ldd	r18, Y+3	; 0x03
 3da:	3c 81       	ldd	r19, Y+4	; 0x04
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	d9 01       	movw	r26, r18
 3e2:	a0 50       	subi	r26, 0x00	; 0
 3e4:	bf 4f       	sbci	r27, 0xFF	; 255
 3e6:	2c 91       	ld	r18, X
 3e8:	21 ff       	sbrs	r18, 1
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <STEPPER_step+0x1ce>
 3ec:	29 81       	ldd	r18, Y+1	; 0x01
 3ee:	3a 81       	ldd	r19, Y+2	; 0x02
 3f0:	20 61       	ori	r18, 0x10	; 16
 3f2:	3a 83       	std	Y+2, r19	; 0x02
 3f4:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x1) val |= R_D;
 3f6:	2b 81       	ldd	r18, Y+3	; 0x03
 3f8:	3c 81       	ldd	r19, Y+4	; 0x04
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	d9 01       	movw	r26, r18
 400:	a0 50       	subi	r26, 0x00	; 0
 402:	bf 4f       	sbci	r27, 0xFF	; 255
 404:	2c 91       	ld	r18, X
 406:	20 ff       	sbrs	r18, 0
 408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	3a 81       	ldd	r19, Y+2	; 0x02
 40e:	20 64       	ori	r18, 0x40	; 64
 410:	3a 83       	std	Y+2, r19	; 0x02
 412:	29 83       	std	Y+1, r18	; 0x01
				
				R_PORT |= val;
 414:	29 81       	ldd	r18, Y+1	; 0x01
 416:	3a 81       	ldd	r19, Y+2	; 0x02
 418:	a2 e6       	ldi	r26, 0x62	; 98
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	3c 91       	ld	r19, X
 41e:	23 2b       	or	r18, r19
 420:	2c 93       	st	X, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 422:	af e1       	ldi	r26, 0x1F	; 31
 424:	be e4       	ldi	r27, 0x4E	; 78
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
	int right_step_abs = right_step >= 0 ? right_step : -right_step;
	
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
	
	for (volatile int i = 0; i < max_step; i ++) {
		for (volatile int j = 0, k = 3; j < 4 && k >= 0; j++, k--) {
 42e:	2b 85       	ldd	r18, Y+11	; 0x0b
 430:	3c 85       	ldd	r19, Y+12	; 0x0c
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	3c 87       	std	Y+12, r19	; 0x0c
 438:	2b 87       	std	Y+11, r18	; 0x0b
 43a:	29 85       	ldd	r18, Y+9	; 0x09
 43c:	3a 85       	ldd	r19, Y+10	; 0x0a
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	31 09       	sbc	r19, r1
 442:	3a 87       	std	Y+10, r19	; 0x0a
 444:	29 87       	std	Y+9, r18	; 0x09
 446:	2b 85       	ldd	r18, Y+11	; 0x0b
 448:	3c 85       	ldd	r19, Y+12	; 0x0c
 44a:	24 30       	cpi	r18, 0x04	; 4
 44c:	31 05       	cpc	r19, r1
 44e:	2c f4       	brge	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	29 85       	ldd	r18, Y+9	; 0x09
 452:	3a 85       	ldd	r19, Y+10	; 0x0a
 454:	33 23       	and	r19, r19
 456:	0c f0       	brlt	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 458:	11 cf       	rjmp	.-478    	; 0x27c <STEPPER_step+0x54>
	int left_step_abs = left_step >= 0 ? left_step : -left_step;
	int right_step_abs = right_step >= 0 ? right_step : -right_step;
	
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
	
	for (volatile int i = 0; i < max_step; i ++) {
 45a:	2d 85       	ldd	r18, Y+13	; 0x0d
 45c:	3e 85       	ldd	r19, Y+14	; 0x0e
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	3e 87       	std	Y+14, r19	; 0x0e
 464:	2d 87       	std	Y+13, r18	; 0x0d
 466:	2d 85       	ldd	r18, Y+13	; 0x0d
 468:	3e 85       	ldd	r19, Y+14	; 0x0e
 46a:	20 17       	cp	r18, r16
 46c:	31 07       	cpc	r19, r17
 46e:	0c f4       	brge	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	fe ce       	rjmp	.-516    	; 0x26e <STEPPER_step+0x46>
			}
			
			_delay_ms(DELAY);
		}
	}
}
 472:	2e 96       	adiw	r28, 0x0e	; 14
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <__subsf3>:
 488:	50 58       	subi	r21, 0x80	; 128

0000048a <__addsf3>:
 48a:	bb 27       	eor	r27, r27
 48c:	aa 27       	eor	r26, r26
 48e:	0e d0       	rcall	.+28     	; 0x4ac <__addsf3x>
 490:	e5 c0       	rjmp	.+458    	; 0x65c <__fp_round>
 492:	d6 d0       	rcall	.+428    	; 0x640 <__fp_pscA>
 494:	30 f0       	brcs	.+12     	; 0x4a2 <__addsf3+0x18>
 496:	db d0       	rcall	.+438    	; 0x64e <__fp_pscB>
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__addsf3+0x18>
 49a:	31 f4       	brne	.+12     	; 0x4a8 <__addsf3+0x1e>
 49c:	9f 3f       	cpi	r25, 0xFF	; 255
 49e:	11 f4       	brne	.+4      	; 0x4a4 <__addsf3+0x1a>
 4a0:	1e f4       	brtc	.+6      	; 0x4a8 <__addsf3+0x1e>
 4a2:	cb c0       	rjmp	.+406    	; 0x63a <__fp_nan>
 4a4:	0e f4       	brtc	.+2      	; 0x4a8 <__addsf3+0x1e>
 4a6:	e0 95       	com	r30
 4a8:	e7 fb       	bst	r30, 7
 4aa:	c1 c0       	rjmp	.+386    	; 0x62e <__fp_inf>

000004ac <__addsf3x>:
 4ac:	e9 2f       	mov	r30, r25
 4ae:	e7 d0       	rcall	.+462    	; 0x67e <__fp_split3>
 4b0:	80 f3       	brcs	.-32     	; 0x492 <__addsf3+0x8>
 4b2:	ba 17       	cp	r27, r26
 4b4:	62 07       	cpc	r22, r18
 4b6:	73 07       	cpc	r23, r19
 4b8:	84 07       	cpc	r24, r20
 4ba:	95 07       	cpc	r25, r21
 4bc:	18 f0       	brcs	.+6      	; 0x4c4 <__addsf3x+0x18>
 4be:	71 f4       	brne	.+28     	; 0x4dc <__addsf3x+0x30>
 4c0:	9e f5       	brtc	.+102    	; 0x528 <__addsf3x+0x7c>
 4c2:	ff c0       	rjmp	.+510    	; 0x6c2 <__fp_zero>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3x+0x1c>
 4c6:	e0 95       	com	r30
 4c8:	0b 2e       	mov	r0, r27
 4ca:	ba 2f       	mov	r27, r26
 4cc:	a0 2d       	mov	r26, r0
 4ce:	0b 01       	movw	r0, r22
 4d0:	b9 01       	movw	r22, r18
 4d2:	90 01       	movw	r18, r0
 4d4:	0c 01       	movw	r0, r24
 4d6:	ca 01       	movw	r24, r20
 4d8:	a0 01       	movw	r20, r0
 4da:	11 24       	eor	r1, r1
 4dc:	ff 27       	eor	r31, r31
 4de:	59 1b       	sub	r21, r25
 4e0:	99 f0       	breq	.+38     	; 0x508 <__addsf3x+0x5c>
 4e2:	59 3f       	cpi	r21, 0xF9	; 249
 4e4:	50 f4       	brcc	.+20     	; 0x4fa <__addsf3x+0x4e>
 4e6:	50 3e       	cpi	r21, 0xE0	; 224
 4e8:	68 f1       	brcs	.+90     	; 0x544 <__addsf3x+0x98>
 4ea:	1a 16       	cp	r1, r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	a2 2f       	mov	r26, r18
 4f0:	23 2f       	mov	r18, r19
 4f2:	34 2f       	mov	r19, r20
 4f4:	44 27       	eor	r20, r20
 4f6:	58 5f       	subi	r21, 0xF8	; 248
 4f8:	f3 cf       	rjmp	.-26     	; 0x4e0 <__addsf3x+0x34>
 4fa:	46 95       	lsr	r20
 4fc:	37 95       	ror	r19
 4fe:	27 95       	ror	r18
 500:	a7 95       	ror	r26
 502:	f0 40       	sbci	r31, 0x00	; 0
 504:	53 95       	inc	r21
 506:	c9 f7       	brne	.-14     	; 0x4fa <__addsf3x+0x4e>
 508:	7e f4       	brtc	.+30     	; 0x528 <__addsf3x+0x7c>
 50a:	1f 16       	cp	r1, r31
 50c:	ba 0b       	sbc	r27, r26
 50e:	62 0b       	sbc	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	ba f0       	brmi	.+46     	; 0x544 <__addsf3x+0x98>
 516:	91 50       	subi	r25, 0x01	; 1
 518:	a1 f0       	breq	.+40     	; 0x542 <__addsf3x+0x96>
 51a:	ff 0f       	add	r31, r31
 51c:	bb 1f       	adc	r27, r27
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	c2 f7       	brpl	.-16     	; 0x516 <__addsf3x+0x6a>
 526:	0e c0       	rjmp	.+28     	; 0x544 <__addsf3x+0x98>
 528:	ba 0f       	add	r27, r26
 52a:	62 1f       	adc	r22, r18
 52c:	73 1f       	adc	r23, r19
 52e:	84 1f       	adc	r24, r20
 530:	48 f4       	brcc	.+18     	; 0x544 <__addsf3x+0x98>
 532:	87 95       	ror	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	9e 3f       	cpi	r25, 0xFE	; 254
 53e:	08 f0       	brcs	.+2      	; 0x542 <__addsf3x+0x96>
 540:	b3 cf       	rjmp	.-154    	; 0x4a8 <__addsf3+0x1e>
 542:	93 95       	inc	r25
 544:	88 0f       	add	r24, r24
 546:	08 f0       	brcs	.+2      	; 0x54a <__addsf3x+0x9e>
 548:	99 27       	eor	r25, r25
 54a:	ee 0f       	add	r30, r30
 54c:	97 95       	ror	r25
 54e:	87 95       	ror	r24
 550:	08 95       	ret

00000552 <__fixsfsi>:
 552:	04 d0       	rcall	.+8      	; 0x55c <__fixunssfsi>
 554:	68 94       	set
 556:	b1 11       	cpse	r27, r1
 558:	b5 c0       	rjmp	.+362    	; 0x6c4 <__fp_szero>
 55a:	08 95       	ret

0000055c <__fixunssfsi>:
 55c:	98 d0       	rcall	.+304    	; 0x68e <__fp_splitA>
 55e:	88 f0       	brcs	.+34     	; 0x582 <__fixunssfsi+0x26>
 560:	9f 57       	subi	r25, 0x7F	; 127
 562:	90 f0       	brcs	.+36     	; 0x588 <__fixunssfsi+0x2c>
 564:	b9 2f       	mov	r27, r25
 566:	99 27       	eor	r25, r25
 568:	b7 51       	subi	r27, 0x17	; 23
 56a:	a0 f0       	brcs	.+40     	; 0x594 <__fixunssfsi+0x38>
 56c:	d1 f0       	breq	.+52     	; 0x5a2 <__fixunssfsi+0x46>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	1a f0       	brmi	.+6      	; 0x57e <__fixunssfsi+0x22>
 578:	ba 95       	dec	r27
 57a:	c9 f7       	brne	.-14     	; 0x56e <__fixunssfsi+0x12>
 57c:	12 c0       	rjmp	.+36     	; 0x5a2 <__fixunssfsi+0x46>
 57e:	b1 30       	cpi	r27, 0x01	; 1
 580:	81 f0       	breq	.+32     	; 0x5a2 <__fixunssfsi+0x46>
 582:	9f d0       	rcall	.+318    	; 0x6c2 <__fp_zero>
 584:	b1 e0       	ldi	r27, 0x01	; 1
 586:	08 95       	ret
 588:	9c c0       	rjmp	.+312    	; 0x6c2 <__fp_zero>
 58a:	67 2f       	mov	r22, r23
 58c:	78 2f       	mov	r23, r24
 58e:	88 27       	eor	r24, r24
 590:	b8 5f       	subi	r27, 0xF8	; 248
 592:	39 f0       	breq	.+14     	; 0x5a2 <__fixunssfsi+0x46>
 594:	b9 3f       	cpi	r27, 0xF9	; 249
 596:	cc f3       	brlt	.-14     	; 0x58a <__fixunssfsi+0x2e>
 598:	86 95       	lsr	r24
 59a:	77 95       	ror	r23
 59c:	67 95       	ror	r22
 59e:	b3 95       	inc	r27
 5a0:	d9 f7       	brne	.-10     	; 0x598 <__fixunssfsi+0x3c>
 5a2:	3e f4       	brtc	.+14     	; 0x5b2 <__fixunssfsi+0x56>
 5a4:	90 95       	com	r25
 5a6:	80 95       	com	r24
 5a8:	70 95       	com	r23
 5aa:	61 95       	neg	r22
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	08 95       	ret

000005b4 <__floatunsisf>:
 5b4:	e8 94       	clt
 5b6:	09 c0       	rjmp	.+18     	; 0x5ca <__floatsisf+0x12>

000005b8 <__floatsisf>:
 5b8:	97 fb       	bst	r25, 7
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__floatsisf+0x12>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	99 23       	and	r25, r25
 5cc:	a9 f0       	breq	.+42     	; 0x5f8 <__floatsisf+0x40>
 5ce:	f9 2f       	mov	r31, r25
 5d0:	96 e9       	ldi	r25, 0x96	; 150
 5d2:	bb 27       	eor	r27, r27
 5d4:	93 95       	inc	r25
 5d6:	f6 95       	lsr	r31
 5d8:	87 95       	ror	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f1 11       	cpse	r31, r1
 5e2:	f8 cf       	rjmp	.-16     	; 0x5d4 <__floatsisf+0x1c>
 5e4:	fa f4       	brpl	.+62     	; 0x624 <__floatsisf+0x6c>
 5e6:	bb 0f       	add	r27, r27
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__floatsisf+0x36>
 5ea:	60 ff       	sbrs	r22, 0
 5ec:	1b c0       	rjmp	.+54     	; 0x624 <__floatsisf+0x6c>
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	16 c0       	rjmp	.+44     	; 0x624 <__floatsisf+0x6c>
 5f8:	88 23       	and	r24, r24
 5fa:	11 f0       	breq	.+4      	; 0x600 <__floatsisf+0x48>
 5fc:	96 e9       	ldi	r25, 0x96	; 150
 5fe:	11 c0       	rjmp	.+34     	; 0x622 <__floatsisf+0x6a>
 600:	77 23       	and	r23, r23
 602:	21 f0       	breq	.+8      	; 0x60c <__floatsisf+0x54>
 604:	9e e8       	ldi	r25, 0x8E	; 142
 606:	87 2f       	mov	r24, r23
 608:	76 2f       	mov	r23, r22
 60a:	05 c0       	rjmp	.+10     	; 0x616 <__floatsisf+0x5e>
 60c:	66 23       	and	r22, r22
 60e:	71 f0       	breq	.+28     	; 0x62c <__floatsisf+0x74>
 610:	96 e8       	ldi	r25, 0x86	; 134
 612:	86 2f       	mov	r24, r22
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	2a f0       	brmi	.+10     	; 0x624 <__floatsisf+0x6c>
 61a:	9a 95       	dec	r25
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	da f7       	brpl	.-10     	; 0x61a <__floatsisf+0x62>
 624:	88 0f       	add	r24, r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	97 f9       	bld	r25, 7
 62c:	08 95       	ret

0000062e <__fp_inf>:
 62e:	97 f9       	bld	r25, 7
 630:	9f 67       	ori	r25, 0x7F	; 127
 632:	80 e8       	ldi	r24, 0x80	; 128
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	08 95       	ret

0000063a <__fp_nan>:
 63a:	9f ef       	ldi	r25, 0xFF	; 255
 63c:	80 ec       	ldi	r24, 0xC0	; 192
 63e:	08 95       	ret

00000640 <__fp_pscA>:
 640:	00 24       	eor	r0, r0
 642:	0a 94       	dec	r0
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	18 06       	cpc	r1, r24
 64a:	09 06       	cpc	r0, r25
 64c:	08 95       	ret

0000064e <__fp_pscB>:
 64e:	00 24       	eor	r0, r0
 650:	0a 94       	dec	r0
 652:	12 16       	cp	r1, r18
 654:	13 06       	cpc	r1, r19
 656:	14 06       	cpc	r1, r20
 658:	05 06       	cpc	r0, r21
 65a:	08 95       	ret

0000065c <__fp_round>:
 65c:	09 2e       	mov	r0, r25
 65e:	03 94       	inc	r0
 660:	00 0c       	add	r0, r0
 662:	11 f4       	brne	.+4      	; 0x668 <__fp_round+0xc>
 664:	88 23       	and	r24, r24
 666:	52 f0       	brmi	.+20     	; 0x67c <__fp_round+0x20>
 668:	bb 0f       	add	r27, r27
 66a:	40 f4       	brcc	.+16     	; 0x67c <__fp_round+0x20>
 66c:	bf 2b       	or	r27, r31
 66e:	11 f4       	brne	.+4      	; 0x674 <__fp_round+0x18>
 670:	60 ff       	sbrs	r22, 0
 672:	04 c0       	rjmp	.+8      	; 0x67c <__fp_round+0x20>
 674:	6f 5f       	subi	r22, 0xFF	; 255
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	08 95       	ret

0000067e <__fp_split3>:
 67e:	57 fd       	sbrc	r21, 7
 680:	90 58       	subi	r25, 0x80	; 128
 682:	44 0f       	add	r20, r20
 684:	55 1f       	adc	r21, r21
 686:	59 f0       	breq	.+22     	; 0x69e <__fp_splitA+0x10>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__fp_splitA+0x1a>
 68c:	47 95       	ror	r20

0000068e <__fp_splitA>:
 68e:	88 0f       	add	r24, r24
 690:	97 fb       	bst	r25, 7
 692:	99 1f       	adc	r25, r25
 694:	61 f0       	breq	.+24     	; 0x6ae <__fp_splitA+0x20>
 696:	9f 3f       	cpi	r25, 0xFF	; 255
 698:	79 f0       	breq	.+30     	; 0x6b8 <__fp_splitA+0x2a>
 69a:	87 95       	ror	r24
 69c:	08 95       	ret
 69e:	12 16       	cp	r1, r18
 6a0:	13 06       	cpc	r1, r19
 6a2:	14 06       	cpc	r1, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	f2 cf       	rjmp	.-28     	; 0x68c <__fp_split3+0xe>
 6a8:	46 95       	lsr	r20
 6aa:	f1 df       	rcall	.-30     	; 0x68e <__fp_splitA>
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <__fp_splitA+0x30>
 6ae:	16 16       	cp	r1, r22
 6b0:	17 06       	cpc	r1, r23
 6b2:	18 06       	cpc	r1, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	f1 cf       	rjmp	.-30     	; 0x69a <__fp_splitA+0xc>
 6b8:	86 95       	lsr	r24
 6ba:	71 05       	cpc	r23, r1
 6bc:	61 05       	cpc	r22, r1
 6be:	08 94       	sec
 6c0:	08 95       	ret

000006c2 <__fp_zero>:
 6c2:	e8 94       	clt

000006c4 <__fp_szero>:
 6c4:	bb 27       	eor	r27, r27
 6c6:	66 27       	eor	r22, r22
 6c8:	77 27       	eor	r23, r23
 6ca:	cb 01       	movw	r24, r22
 6cc:	97 f9       	bld	r25, 7
 6ce:	08 95       	ret

000006d0 <__mulsf3>:
 6d0:	0b d0       	rcall	.+22     	; 0x6e8 <__mulsf3x>
 6d2:	c4 cf       	rjmp	.-120    	; 0x65c <__fp_round>
 6d4:	b5 df       	rcall	.-150    	; 0x640 <__fp_pscA>
 6d6:	28 f0       	brcs	.+10     	; 0x6e2 <__mulsf3+0x12>
 6d8:	ba df       	rcall	.-140    	; 0x64e <__fp_pscB>
 6da:	18 f0       	brcs	.+6      	; 0x6e2 <__mulsf3+0x12>
 6dc:	95 23       	and	r25, r21
 6de:	09 f0       	breq	.+2      	; 0x6e2 <__mulsf3+0x12>
 6e0:	a6 cf       	rjmp	.-180    	; 0x62e <__fp_inf>
 6e2:	ab cf       	rjmp	.-170    	; 0x63a <__fp_nan>
 6e4:	11 24       	eor	r1, r1
 6e6:	ee cf       	rjmp	.-36     	; 0x6c4 <__fp_szero>

000006e8 <__mulsf3x>:
 6e8:	ca df       	rcall	.-108    	; 0x67e <__fp_split3>
 6ea:	a0 f3       	brcs	.-24     	; 0x6d4 <__mulsf3+0x4>

000006ec <__mulsf3_pse>:
 6ec:	95 9f       	mul	r25, r21
 6ee:	d1 f3       	breq	.-12     	; 0x6e4 <__mulsf3+0x14>
 6f0:	95 0f       	add	r25, r21
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	55 1f       	adc	r21, r21
 6f6:	62 9f       	mul	r22, r18
 6f8:	f0 01       	movw	r30, r0
 6fa:	72 9f       	mul	r23, r18
 6fc:	bb 27       	eor	r27, r27
 6fe:	f0 0d       	add	r31, r0
 700:	b1 1d       	adc	r27, r1
 702:	63 9f       	mul	r22, r19
 704:	aa 27       	eor	r26, r26
 706:	f0 0d       	add	r31, r0
 708:	b1 1d       	adc	r27, r1
 70a:	aa 1f       	adc	r26, r26
 70c:	64 9f       	mul	r22, r20
 70e:	66 27       	eor	r22, r22
 710:	b0 0d       	add	r27, r0
 712:	a1 1d       	adc	r26, r1
 714:	66 1f       	adc	r22, r22
 716:	82 9f       	mul	r24, r18
 718:	22 27       	eor	r18, r18
 71a:	b0 0d       	add	r27, r0
 71c:	a1 1d       	adc	r26, r1
 71e:	62 1f       	adc	r22, r18
 720:	73 9f       	mul	r23, r19
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	62 1f       	adc	r22, r18
 728:	83 9f       	mul	r24, r19
 72a:	a0 0d       	add	r26, r0
 72c:	61 1d       	adc	r22, r1
 72e:	22 1f       	adc	r18, r18
 730:	74 9f       	mul	r23, r20
 732:	33 27       	eor	r19, r19
 734:	a0 0d       	add	r26, r0
 736:	61 1d       	adc	r22, r1
 738:	23 1f       	adc	r18, r19
 73a:	84 9f       	mul	r24, r20
 73c:	60 0d       	add	r22, r0
 73e:	21 1d       	adc	r18, r1
 740:	82 2f       	mov	r24, r18
 742:	76 2f       	mov	r23, r22
 744:	6a 2f       	mov	r22, r26
 746:	11 24       	eor	r1, r1
 748:	9f 57       	subi	r25, 0x7F	; 127
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	8a f0       	brmi	.+34     	; 0x770 <__mulsf3_pse+0x84>
 74e:	e1 f0       	breq	.+56     	; 0x788 <__mulsf3_pse+0x9c>
 750:	88 23       	and	r24, r24
 752:	4a f0       	brmi	.+18     	; 0x766 <__mulsf3_pse+0x7a>
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	bb 1f       	adc	r27, r27
 75a:	66 1f       	adc	r22, r22
 75c:	77 1f       	adc	r23, r23
 75e:	88 1f       	adc	r24, r24
 760:	91 50       	subi	r25, 0x01	; 1
 762:	50 40       	sbci	r21, 0x00	; 0
 764:	a9 f7       	brne	.-22     	; 0x750 <__mulsf3_pse+0x64>
 766:	9e 3f       	cpi	r25, 0xFE	; 254
 768:	51 05       	cpc	r21, r1
 76a:	70 f0       	brcs	.+28     	; 0x788 <__mulsf3_pse+0x9c>
 76c:	60 cf       	rjmp	.-320    	; 0x62e <__fp_inf>
 76e:	aa cf       	rjmp	.-172    	; 0x6c4 <__fp_szero>
 770:	5f 3f       	cpi	r21, 0xFF	; 255
 772:	ec f3       	brlt	.-6      	; 0x76e <__mulsf3_pse+0x82>
 774:	98 3e       	cpi	r25, 0xE8	; 232
 776:	dc f3       	brlt	.-10     	; 0x76e <__mulsf3_pse+0x82>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b7 95       	ror	r27
 780:	f7 95       	ror	r31
 782:	e7 95       	ror	r30
 784:	9f 5f       	subi	r25, 0xFF	; 255
 786:	c1 f7       	brne	.-16     	; 0x778 <__mulsf3_pse+0x8c>
 788:	fe 2b       	or	r31, r30
 78a:	88 0f       	add	r24, r24
 78c:	91 1d       	adc	r25, r1
 78e:	96 95       	lsr	r25
 790:	87 95       	ror	r24
 792:	97 f9       	bld	r25, 7
 794:	08 95       	ret

00000796 <round>:
 796:	7b df       	rcall	.-266    	; 0x68e <__fp_splitA>
 798:	e0 f0       	brcs	.+56     	; 0x7d2 <round+0x3c>
 79a:	9e 37       	cpi	r25, 0x7E	; 126
 79c:	d8 f0       	brcs	.+54     	; 0x7d4 <round+0x3e>
 79e:	96 39       	cpi	r25, 0x96	; 150
 7a0:	b8 f4       	brcc	.+46     	; 0x7d0 <round+0x3a>
 7a2:	9e 38       	cpi	r25, 0x8E	; 142
 7a4:	48 f4       	brcc	.+18     	; 0x7b8 <round+0x22>
 7a6:	67 2f       	mov	r22, r23
 7a8:	78 2f       	mov	r23, r24
 7aa:	88 27       	eor	r24, r24
 7ac:	98 5f       	subi	r25, 0xF8	; 248
 7ae:	f9 cf       	rjmp	.-14     	; 0x7a2 <round+0xc>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	93 95       	inc	r25
 7b8:	95 39       	cpi	r25, 0x95	; 149
 7ba:	d0 f3       	brcs	.-12     	; 0x7b0 <round+0x1a>
 7bc:	b6 2f       	mov	r27, r22
 7be:	b1 70       	andi	r27, 0x01	; 1
 7c0:	6b 0f       	add	r22, r27
 7c2:	71 1d       	adc	r23, r1
 7c4:	81 1d       	adc	r24, r1
 7c6:	20 f4       	brcc	.+8      	; 0x7d0 <round+0x3a>
 7c8:	87 95       	ror	r24
 7ca:	77 95       	ror	r23
 7cc:	67 95       	ror	r22
 7ce:	93 95       	inc	r25
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <__fp_mintl>
 7d2:	1c c0       	rjmp	.+56     	; 0x80c <__fp_mpack>
 7d4:	77 cf       	rjmp	.-274    	; 0x6c4 <__fp_szero>

000007d6 <__fp_mintl>:
 7d6:	88 23       	and	r24, r24
 7d8:	71 f4       	brne	.+28     	; 0x7f6 <__fp_mintl+0x20>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__fp_mintl+0x10>
 7de:	98 50       	subi	r25, 0x08	; 8
 7e0:	87 2b       	or	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <__fp_mintl+0x1e>
 7e6:	66 23       	and	r22, r22
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__fp_mintl+0x18>
 7ea:	99 27       	eor	r25, r25
 7ec:	0d c0       	rjmp	.+26     	; 0x808 <__fp_mintl+0x32>
 7ee:	90 51       	subi	r25, 0x10	; 16
 7f0:	86 2b       	or	r24, r22
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	2a f0       	brmi	.+10     	; 0x802 <__fp_mintl+0x2c>
 7f8:	9a 95       	dec	r25
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	da f7       	brpl	.-10     	; 0x7f8 <__fp_mintl+0x22>
 802:	88 0f       	add	r24, r24
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_mpack>:
 80c:	9f 3f       	cpi	r25, 0xFF	; 255
 80e:	31 f0       	breq	.+12     	; 0x81c <__fp_mpack_finite+0xc>

00000810 <__fp_mpack_finite>:
 810:	91 50       	subi	r25, 0x01	; 1
 812:	20 f4       	brcc	.+8      	; 0x81c <__fp_mpack_finite+0xc>
 814:	87 95       	ror	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	88 0f       	add	r24, r24
 81e:	91 1d       	adc	r25, r1
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
