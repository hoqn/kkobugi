
Kkobugi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000772  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000772  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001095  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b97  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a0  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059a  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  0000351e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	56 d0       	rcall	.+172    	; 0x160 <main>
  b4:	5c c3       	rjmp	.+1720   	; 0x76e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <KKOBUGI_go>:
void KKOBUGI_go(int distance) {
	STEPPER_step(+cm_to_step_left(distance), +cm_to_step_right(distance));
}

void KKOBUGI_turn(int degree) {
	__KKOBUGI_turn(degree, 0);
  b8:	bc 01       	movw	r22, r24
  ba:	96 c0       	rjmp	.+300    	; 0x1e8 <STEPPER_step>
  bc:	08 95       	ret

000000be <KKOBUGI_start_drawing>:
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	6f c0       	rjmp	.+222    	; 0x1a2 <SERVO_rotate>
  c4:	08 95       	ret

000000c6 <KKOBUGI_stop_drawing>:
  c6:	8d e2       	ldi	r24, 0x2D	; 45
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	6b c0       	rjmp	.+214    	; 0x1a2 <SERVO_rotate>
  cc:	08 95       	ret

000000ce <KKOBUGI_init>:
  ce:	56 d0       	rcall	.+172    	; 0x17c <SERVO_init>
  d0:	85 d0       	rcall	.+266    	; 0x1dc <STEPPER_init>
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <KKOBUGI_stop_drawing>
  d4:	08 95       	ret

000000d6 <__KKOBUGI_turn>:
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
  e0:	8b 01       	movw	r16, r22
  e2:	67 2b       	or	r22, r23
  e4:	09 f0       	breq	.+2      	; 0xe8 <__KKOBUGI_turn+0x12>
  e6:	ef df       	rcall	.-34     	; 0xc6 <KKOBUGI_stop_drawing>
  e8:	be 01       	movw	r22, r28
  ea:	dd 0f       	add	r29, r29
  ec:	88 0b       	sbc	r24, r24
  ee:	99 0b       	sbc	r25, r25
  f0:	4f d2       	rcall	.+1182   	; 0x590 <__floatsisf>
  f2:	2d ec       	ldi	r18, 0xCD	; 205
  f4:	3c ec       	ldi	r19, 0xCC	; 204
  f6:	4c e2       	ldi	r20, 0x2C	; 44
  f8:	50 e4       	ldi	r21, 0x40	; 64
  fa:	d6 d2       	rcall	.+1452   	; 0x6a8 <__mulsf3>
  fc:	16 d2       	rcall	.+1068   	; 0x52a <__fixsfsi>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	66 27       	eor	r22, r22
 104:	77 27       	eor	r23, r23
 106:	68 1b       	sub	r22, r24
 108:	79 0b       	sbc	r23, r25
 10a:	6e d0       	rcall	.+220    	; 0x1e8 <STEPPER_step>
 10c:	01 2b       	or	r16, r17
 10e:	09 f0       	breq	.+2      	; 0x112 <__KKOBUGI_turn+0x3c>
 110:	d6 df       	rcall	.-84     	; 0xbe <KKOBUGI_start_drawing>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <KKOBUGI_turn_with_pause>:
}

void KKOBUGI_turn_with_pause(int degree) {
	__KKOBUGI_turn(degree, 1);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	da cf       	rjmp	.-76     	; 0xd6 <__KKOBUGI_turn>
 122:	08 95       	ret

00000124 <draw>:
	draw();
	//gakto_bojeong();
	//servo_bojeong();
}

void draw() {
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
	//}
	//
	//KKOBUGI_stop_drawing();
	
	//KKOBUGI_turn(+90);
	KKOBUGI_start_drawing();
 12c:	c8 df       	rcall	.-112    	; 0xbe <KKOBUGI_start_drawing>
	for (int go = 180, i = 5; i--; go*=-1) {
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	c4 eb       	ldi	r28, 0xB4	; 180
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	09 c0       	rjmp	.+18     	; 0x14a <draw+0x26>
	KKOBUGI_go(go);
 138:	ce 01       	movw	r24, r28
 13a:	be df       	rcall	.-132    	; 0xb8 <KKOBUGI_go>
	KKOBUGI_turn_with_pause(-36);
 13c:	8c ed       	ldi	r24, 0xDC	; 220
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	ed df       	rcall	.-38     	; 0x11c <KKOBUGI_turn_with_pause>
	//
	//KKOBUGI_stop_drawing();
	
	//KKOBUGI_turn(+90);
	KKOBUGI_start_drawing();
	for (int go = 180, i = 5; i--; go*=-1) {
 142:	d1 95       	neg	r29
 144:	c1 95       	neg	r28
 146:	d1 09       	sbc	r29, r1
 148:	c8 01       	movw	r24, r16
 14a:	8c 01       	movw	r16, r24
 14c:	01 50       	subi	r16, 0x01	; 1
 14e:	11 09       	sbc	r17, r1
 150:	89 2b       	or	r24, r25
	KKOBUGI_go(go);
	KKOBUGI_turn_with_pause(-36);
}	
KKOBUGI_stop_drawing();
 152:	91 f7       	brne	.-28     	; 0x138 <draw+0x14>
 154:	b8 df       	rcall	.-144    	; 0xc6 <KKOBUGI_stop_drawing>
	//	KKOBUGI_turn_with_pause(-36);
	//	KKOBUGI_go(-100);
	//	KKOBUGI_turn_with_pause(108);
	//}
	//KKOBUGI_stop_drawing();
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <main>:
		_delay_ms(1000);
	}
}

int main(void) {
	KKOBUGI_init();
 160:	b6 df       	rcall	.-148    	; 0xce <KKOBUGI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	8b e7       	ldi	r24, 0x7B	; 123
 166:	92 e9       	ldi	r25, 0x92	; 146
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x12>
	_delay_ms(3000);
	
	draw();
 172:	00 00       	nop
 174:	d7 df       	rcall	.-82     	; 0x124 <draw>
	//gakto_bojeong();
	//servo_bojeong();
}
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret

0000017c <SERVO_init>:
#define __DELAY_BACKWARD_COMPATIBLE__
#include <avr/io.h>
#include <util/delay.h>

void SERVO_init() {
		DDRB|=0x20;
 17c:	87 b3       	in	r24, 0x17	; 23
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	87 bb       	out	0x17, r24	; 23
		PORTB|=0x20;
 182:	88 b3       	in	r24, 0x18	; 24
 184:	80 62       	ori	r24, 0x20	; 32
 186:	88 bb       	out	0x18, r24	; 24

		TCCR1A=0x82;
 188:	82 e8       	ldi	r24, 0x82	; 130
 18a:	8f bd       	out	0x2f, r24	; 47
		TCCR1B=0x1b;
 18c:	8b e1       	ldi	r24, 0x1B	; 27
 18e:	8e bd       	out	0x2e, r24	; 46
		ICR1=4999;     //TOP 0부터 시작
 190:	87 e8       	ldi	r24, 0x87	; 135
 192:	93 e1       	ldi	r25, 0x13	; 19
 194:	97 bd       	out	0x27, r25	; 39
 196:	86 bd       	out	0x26, r24	; 38
		
		OCR1A=375;     //0도 375, 90도 625
 198:	87 e7       	ldi	r24, 0x77	; 119
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	9b bd       	out	0x2b, r25	; 43
 19e:	8a bd       	out	0x2a, r24	; 42
 1a0:	08 95       	ret

000001a2 <SERVO_rotate>:
}

void SERVO_rotate(int degree) {
	OCR1A = 375 + (degree * ((float)25/9));
 1a2:	bc 01       	movw	r22, r24
 1a4:	99 0f       	add	r25, r25
 1a6:	88 0b       	sbc	r24, r24
 1a8:	99 0b       	sbc	r25, r25
 1aa:	f2 d1       	rcall	.+996    	; 0x590 <__floatsisf>
 1ac:	2c e1       	ldi	r18, 0x1C	; 28
 1ae:	37 ec       	ldi	r19, 0xC7	; 199
 1b0:	41 e3       	ldi	r20, 0x31	; 49
 1b2:	50 e4       	ldi	r21, 0x40	; 64
 1b4:	79 d2       	rcall	.+1266   	; 0x6a8 <__mulsf3>
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e8       	ldi	r19, 0x80	; 128
 1ba:	4b eb       	ldi	r20, 0xBB	; 187
 1bc:	53 e4       	ldi	r21, 0x43	; 67
 1be:	51 d1       	rcall	.+674    	; 0x462 <__addsf3>
 1c0:	b9 d1       	rcall	.+882    	; 0x534 <__fixunssfsi>
 1c2:	7b bd       	out	0x2b, r23	; 43
 1c4:	6a bd       	out	0x2a, r22	; 42
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c6:	88 e8       	ldi	r24, 0x88	; 136
 1c8:	93 e1       	ldi	r25, 0x13	; 19
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <SERVO_rotate+0x34>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	e8 e2       	ldi	r30, 0x28	; 40
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <SERVO_rotate+0x2e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	c9 f7       	brne	.-14     	; 0x1cc <SERVO_rotate+0x2a>
	//OCR1A = degree > 0 ? 500 : 375;
	_delay_ms(500);
}
 1da:	08 95       	ret

000001dc <STEPPER_init>:
	0b0110,
	0b1100,
};

void STEPPER_init() {
	L_DDR= 0xFF;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	82 b9       	out	0x02, r24	; 2
	R_DDR= 0xFF;
 1e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	DDRA = 0xFF;
 1e4:	8a bb       	out	0x1a, r24	; 26
 1e6:	08 95       	ret

000001e8 <STEPPER_step>:
}

void STEPPER_step(int left_step, int right_step) {
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	2e 97       	sbiw	r28, 0x0e	; 14
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
	
	int left_step_abs = left_step >= 0 ? left_step : -left_step;
 200:	ac 01       	movw	r20, r24
 202:	99 23       	and	r25, r25
 204:	24 f4       	brge	.+8      	; 0x20e <STEPPER_step+0x26>
 206:	44 27       	eor	r20, r20
 208:	55 27       	eor	r21, r21
 20a:	48 1b       	sub	r20, r24
 20c:	59 0b       	sbc	r21, r25
	int right_step_abs = right_step >= 0 ? right_step : -right_step;
 20e:	9b 01       	movw	r18, r22
 210:	77 23       	and	r23, r23
 212:	24 f4       	brge	.+8      	; 0x21c <STEPPER_step+0x34>
 214:	22 27       	eor	r18, r18
 216:	33 27       	eor	r19, r19
 218:	26 1b       	sub	r18, r22
 21a:	37 0b       	sbc	r19, r23
 21c:	f9 01       	movw	r30, r18
	
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
 21e:	8a 01       	movw	r16, r20
 220:	42 17       	cp	r20, r18
 222:	53 07       	cpc	r21, r19
 224:	0c f4       	brge	.+2      	; 0x228 <STEPPER_step+0x40>
 226:	89 01       	movw	r16, r18
	
	PORTA = 0x00;
 228:	1b ba       	out	0x1b, r1	; 27
	
	for (volatile int i = 0; i < max_step; i ++) {
 22a:	1e 86       	std	Y+14, r1	; 0x0e
 22c:	1d 86       	std	Y+13, r1	; 0x0d
 22e:	06 c1       	rjmp	.+524    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		for (volatile int j = 0, k = 3; j < 4 && k >= 0; j++, k--) {
 230:	1c 86       	std	Y+12, r1	; 0x0c
 232:	1b 86       	std	Y+11, r1	; 0x0b
 234:	23 e0       	ldi	r18, 0x03	; 3
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	3a 87       	std	Y+10, r19	; 0x0a
 23a:	29 87       	std	Y+9, r18	; 0x09
 23c:	ef c0       	rjmp	.+478    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			//PORTA = 0x00;
			
			L_PORT = 0x00;
 23e:	13 b8       	out	0x03, r1	; 3
			R_PORT = 0x00;
 240:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			
			// left
			if (i < left_step_abs) {
 244:	2d 85       	ldd	r18, Y+13	; 0x0d
 246:	3e 85       	ldd	r19, Y+14	; 0x0e
 248:	24 17       	cp	r18, r20
 24a:	35 07       	cpc	r19, r21
 24c:	0c f0       	brlt	.+2      	; 0x250 <STEPPER_step+0x68>
 24e:	66 c0       	rjmp	.+204    	; 0x31c <STEPPER_step+0x134>
				//L_PORT = 0x00;
				
				volatile int q = left_step > 0 ? j%4 : k%4;
 250:	18 16       	cp	r1, r24
 252:	19 06       	cpc	r1, r25
 254:	6c f4       	brge	.+26     	; 0x270 <STEPPER_step+0x88>
 256:	2b 85       	ldd	r18, Y+11	; 0x0b
 258:	3c 85       	ldd	r19, Y+12	; 0x0c
 25a:	23 70       	andi	r18, 0x03	; 3
 25c:	30 78       	andi	r19, 0x80	; 128
 25e:	33 23       	and	r19, r19
 260:	9c f4       	brge	.+38     	; 0x288 <STEPPER_step+0xa0>
 262:	21 50       	subi	r18, 0x01	; 1
 264:	31 09       	sbc	r19, r1
 266:	2c 6f       	ori	r18, 0xFC	; 252
 268:	3f 6f       	ori	r19, 0xFF	; 255
 26a:	2f 5f       	subi	r18, 0xFF	; 255
 26c:	3f 4f       	sbci	r19, 0xFF	; 255
 26e:	0c c0       	rjmp	.+24     	; 0x288 <STEPPER_step+0xa0>
 270:	29 85       	ldd	r18, Y+9	; 0x09
 272:	3a 85       	ldd	r19, Y+10	; 0x0a
 274:	23 70       	andi	r18, 0x03	; 3
 276:	30 78       	andi	r19, 0x80	; 128
 278:	33 23       	and	r19, r19
 27a:	34 f4       	brge	.+12     	; 0x288 <STEPPER_step+0xa0>
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	31 09       	sbc	r19, r1
 280:	2c 6f       	ori	r18, 0xFC	; 252
 282:	3f 6f       	ori	r19, 0xFF	; 255
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	38 87       	std	Y+8, r19	; 0x08
 28a:	2f 83       	std	Y+7, r18	; 0x07
				
				volatile unsigned int val = 0x00;
 28c:	1e 82       	std	Y+6, r1	; 0x06
 28e:	1d 82       	std	Y+5, r1	; 0x05
				
				if (full_pattern[q] & 0x8) val |= L_A;
 290:	2f 81       	ldd	r18, Y+7	; 0x07
 292:	38 85       	ldd	r19, Y+8	; 0x08
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	d9 01       	movw	r26, r18
 29a:	a0 50       	subi	r26, 0x00	; 0
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	2c 91       	ld	r18, X
 2a0:	23 ff       	sbrs	r18, 3
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <STEPPER_step+0xc6>
 2a4:	2d 81       	ldd	r18, Y+5	; 0x05
 2a6:	3e 81       	ldd	r19, Y+6	; 0x06
 2a8:	20 68       	ori	r18, 0x80	; 128
 2aa:	3e 83       	std	Y+6, r19	; 0x06
 2ac:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x4) val |= L_B;
 2ae:	2f 81       	ldd	r18, Y+7	; 0x07
 2b0:	38 85       	ldd	r19, Y+8	; 0x08
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	d9 01       	movw	r26, r18
 2b8:	a0 50       	subi	r26, 0x00	; 0
 2ba:	bf 4f       	sbci	r27, 0xFF	; 255
 2bc:	2c 91       	ld	r18, X
 2be:	22 ff       	sbrs	r18, 2
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <STEPPER_step+0xe4>
 2c2:	2d 81       	ldd	r18, Y+5	; 0x05
 2c4:	3e 81       	ldd	r19, Y+6	; 0x06
 2c6:	20 62       	ori	r18, 0x20	; 32
 2c8:	3e 83       	std	Y+6, r19	; 0x06
 2ca:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x2) val |= L_C;
 2cc:	2f 81       	ldd	r18, Y+7	; 0x07
 2ce:	38 85       	ldd	r19, Y+8	; 0x08
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	d9 01       	movw	r26, r18
 2d6:	a0 50       	subi	r26, 0x00	; 0
 2d8:	bf 4f       	sbci	r27, 0xFF	; 255
 2da:	2c 91       	ld	r18, X
 2dc:	21 ff       	sbrs	r18, 1
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <STEPPER_step+0x102>
 2e0:	2d 81       	ldd	r18, Y+5	; 0x05
 2e2:	3e 81       	ldd	r19, Y+6	; 0x06
 2e4:	20 64       	ori	r18, 0x40	; 64
 2e6:	3e 83       	std	Y+6, r19	; 0x06
 2e8:	2d 83       	std	Y+5, r18	; 0x05
				if (full_pattern[q] & 0x1) val |= L_D;
 2ea:	2f 81       	ldd	r18, Y+7	; 0x07
 2ec:	38 85       	ldd	r19, Y+8	; 0x08
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	d9 01       	movw	r26, r18
 2f4:	a0 50       	subi	r26, 0x00	; 0
 2f6:	bf 4f       	sbci	r27, 0xFF	; 255
 2f8:	2c 91       	ld	r18, X
 2fa:	20 ff       	sbrs	r18, 0
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <STEPPER_step+0x120>
 2fe:	2d 81       	ldd	r18, Y+5	; 0x05
 300:	3e 81       	ldd	r19, Y+6	; 0x06
 302:	20 61       	ori	r18, 0x10	; 16
 304:	3e 83       	std	Y+6, r19	; 0x06
 306:	2d 83       	std	Y+5, r18	; 0x05
				
				PORTA |= val;
 308:	2d 81       	ldd	r18, Y+5	; 0x05
 30a:	3e 81       	ldd	r19, Y+6	; 0x06
 30c:	3b b3       	in	r19, 0x1b	; 27
 30e:	23 2b       	or	r18, r19
 310:	2b bb       	out	0x1b, r18	; 27
				
				L_PORT |= val;
 312:	2d 81       	ldd	r18, Y+5	; 0x05
 314:	3e 81       	ldd	r19, Y+6	; 0x06
 316:	33 b1       	in	r19, 0x03	; 3
 318:	23 2b       	or	r18, r19
 31a:	23 b9       	out	0x03, r18	; 3
			}
			
			// right
			if (i < right_step_abs) {
 31c:	2d 85       	ldd	r18, Y+13	; 0x0d
 31e:	3e 85       	ldd	r19, Y+14	; 0x0e
 320:	2e 17       	cp	r18, r30
 322:	3f 07       	cpc	r19, r31
 324:	0c f0       	brlt	.+2      	; 0x328 <STEPPER_step+0x140>
 326:	68 c0       	rjmp	.+208    	; 0x3f8 <STEPPER_step+0x210>
				//R_PORT = 0x00;
				
				volatile int q = right_step > 0 ? j%4 : k%4;
 328:	16 16       	cp	r1, r22
 32a:	17 06       	cpc	r1, r23
 32c:	6c f4       	brge	.+26     	; 0x348 <STEPPER_step+0x160>
 32e:	2b 85       	ldd	r18, Y+11	; 0x0b
 330:	3c 85       	ldd	r19, Y+12	; 0x0c
 332:	23 70       	andi	r18, 0x03	; 3
 334:	30 78       	andi	r19, 0x80	; 128
 336:	33 23       	and	r19, r19
 338:	9c f4       	brge	.+38     	; 0x360 <STEPPER_step+0x178>
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	31 09       	sbc	r19, r1
 33e:	2c 6f       	ori	r18, 0xFC	; 252
 340:	3f 6f       	ori	r19, 0xFF	; 255
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	0c c0       	rjmp	.+24     	; 0x360 <STEPPER_step+0x178>
 348:	29 85       	ldd	r18, Y+9	; 0x09
 34a:	3a 85       	ldd	r19, Y+10	; 0x0a
 34c:	23 70       	andi	r18, 0x03	; 3
 34e:	30 78       	andi	r19, 0x80	; 128
 350:	33 23       	and	r19, r19
 352:	34 f4       	brge	.+12     	; 0x360 <STEPPER_step+0x178>
 354:	21 50       	subi	r18, 0x01	; 1
 356:	31 09       	sbc	r19, r1
 358:	2c 6f       	ori	r18, 0xFC	; 252
 35a:	3f 6f       	ori	r19, 0xFF	; 255
 35c:	2f 5f       	subi	r18, 0xFF	; 255
 35e:	3f 4f       	sbci	r19, 0xFF	; 255
 360:	3c 83       	std	Y+4, r19	; 0x04
 362:	2b 83       	std	Y+3, r18	; 0x03
				
				volatile unsigned int val = 0x00;
 364:	1a 82       	std	Y+2, r1	; 0x02
 366:	19 82       	std	Y+1, r1	; 0x01
				
				
				if (full_pattern[q] & 0x8) val |= R_A;
 368:	2b 81       	ldd	r18, Y+3	; 0x03
 36a:	3c 81       	ldd	r19, Y+4	; 0x04
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	d9 01       	movw	r26, r18
 372:	a0 50       	subi	r26, 0x00	; 0
 374:	bf 4f       	sbci	r27, 0xFF	; 255
 376:	2c 91       	ld	r18, X
 378:	23 ff       	sbrs	r18, 3
 37a:	05 c0       	rjmp	.+10     	; 0x386 <STEPPER_step+0x19e>
 37c:	29 81       	ldd	r18, Y+1	; 0x01
 37e:	3a 81       	ldd	r19, Y+2	; 0x02
 380:	21 60       	ori	r18, 0x01	; 1
 382:	3a 83       	std	Y+2, r19	; 0x02
 384:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x4) val |= R_B;
 386:	2b 81       	ldd	r18, Y+3	; 0x03
 388:	3c 81       	ldd	r19, Y+4	; 0x04
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	d9 01       	movw	r26, r18
 390:	a0 50       	subi	r26, 0x00	; 0
 392:	bf 4f       	sbci	r27, 0xFF	; 255
 394:	2c 91       	ld	r18, X
 396:	22 ff       	sbrs	r18, 2
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <STEPPER_step+0x1bc>
 39a:	29 81       	ldd	r18, Y+1	; 0x01
 39c:	3a 81       	ldd	r19, Y+2	; 0x02
 39e:	24 60       	ori	r18, 0x04	; 4
 3a0:	3a 83       	std	Y+2, r19	; 0x02
 3a2:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x2) val |= R_C;
 3a4:	2b 81       	ldd	r18, Y+3	; 0x03
 3a6:	3c 81       	ldd	r19, Y+4	; 0x04
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	d9 01       	movw	r26, r18
 3ae:	a0 50       	subi	r26, 0x00	; 0
 3b0:	bf 4f       	sbci	r27, 0xFF	; 255
 3b2:	2c 91       	ld	r18, X
 3b4:	21 ff       	sbrs	r18, 1
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <STEPPER_step+0x1da>
 3b8:	29 81       	ldd	r18, Y+1	; 0x01
 3ba:	3a 81       	ldd	r19, Y+2	; 0x02
 3bc:	20 61       	ori	r18, 0x10	; 16
 3be:	3a 83       	std	Y+2, r19	; 0x02
 3c0:	29 83       	std	Y+1, r18	; 0x01
				if (full_pattern[q] & 0x1) val |= R_D;
 3c2:	2b 81       	ldd	r18, Y+3	; 0x03
 3c4:	3c 81       	ldd	r19, Y+4	; 0x04
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	d9 01       	movw	r26, r18
 3cc:	a0 50       	subi	r26, 0x00	; 0
 3ce:	bf 4f       	sbci	r27, 0xFF	; 255
 3d0:	2c 91       	ld	r18, X
 3d2:	20 ff       	sbrs	r18, 0
 3d4:	05 c0       	rjmp	.+10     	; 0x3e0 <STEPPER_step+0x1f8>
 3d6:	29 81       	ldd	r18, Y+1	; 0x01
 3d8:	3a 81       	ldd	r19, Y+2	; 0x02
 3da:	20 64       	ori	r18, 0x40	; 64
 3dc:	3a 83       	std	Y+2, r19	; 0x02
 3de:	29 83       	std	Y+1, r18	; 0x01
				
				PORTA |= val;
 3e0:	29 81       	ldd	r18, Y+1	; 0x01
 3e2:	3a 81       	ldd	r19, Y+2	; 0x02
 3e4:	3b b3       	in	r19, 0x1b	; 27
 3e6:	23 2b       	or	r18, r19
 3e8:	2b bb       	out	0x1b, r18	; 27
				
				R_PORT |= val;
 3ea:	29 81       	ldd	r18, Y+1	; 0x01
 3ec:	3a 81       	ldd	r19, Y+2	; 0x02
 3ee:	a2 e6       	ldi	r26, 0x62	; 98
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	3c 91       	ld	r19, X
 3f4:	23 2b       	or	r18, r19
 3f6:	2c 93       	st	X, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	af e7       	ldi	r26, 0x7F	; 127
 3fa:	be e3       	ldi	r27, 0x3E	; 62
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <STEPPER_step+0x214>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
	
	PORTA = 0x00;
	
	for (volatile int i = 0; i < max_step; i ++) {
		for (volatile int j = 0, k = 3; j < 4 && k >= 0; j++, k--) {
 404:	2b 85       	ldd	r18, Y+11	; 0x0b
 406:	3c 85       	ldd	r19, Y+12	; 0x0c
 408:	2f 5f       	subi	r18, 0xFF	; 255
 40a:	3f 4f       	sbci	r19, 0xFF	; 255
 40c:	3c 87       	std	Y+12, r19	; 0x0c
 40e:	2b 87       	std	Y+11, r18	; 0x0b
 410:	29 85       	ldd	r18, Y+9	; 0x09
 412:	3a 85       	ldd	r19, Y+10	; 0x0a
 414:	21 50       	subi	r18, 0x01	; 1
 416:	31 09       	sbc	r19, r1
 418:	3a 87       	std	Y+10, r19	; 0x0a
 41a:	29 87       	std	Y+9, r18	; 0x09
 41c:	2b 85       	ldd	r18, Y+11	; 0x0b
 41e:	3c 85       	ldd	r19, Y+12	; 0x0c
 420:	24 30       	cpi	r18, 0x04	; 4
 422:	31 05       	cpc	r19, r1
 424:	2c f4       	brge	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	29 85       	ldd	r18, Y+9	; 0x09
 428:	3a 85       	ldd	r19, Y+10	; 0x0a
 42a:	33 23       	and	r19, r19
 42c:	0c f0       	brlt	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	07 cf       	rjmp	.-498    	; 0x23e <STEPPER_step+0x56>
	
	int max_step = left_step_abs > right_step_abs ? left_step_abs : right_step_abs;
	
	PORTA = 0x00;
	
	for (volatile int i = 0; i < max_step; i ++) {
 430:	2d 85       	ldd	r18, Y+13	; 0x0d
 432:	3e 85       	ldd	r19, Y+14	; 0x0e
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	3e 87       	std	Y+14, r19	; 0x0e
 43a:	2d 87       	std	Y+13, r18	; 0x0d
 43c:	2d 85       	ldd	r18, Y+13	; 0x0d
 43e:	3e 85       	ldd	r19, Y+14	; 0x0e
 440:	20 17       	cp	r18, r16
 442:	31 07       	cpc	r19, r17
 444:	0c f4       	brge	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	f4 ce       	rjmp	.-536    	; 0x230 <STEPPER_step+0x48>
			_delay_ms(DELAY);
			//_delay_ms(500);
		}
	}
	
	PORTA = 0x00;
 448:	1b ba       	out	0x1b, r1	; 27
}
 44a:	2e 96       	adiw	r28, 0x0e	; 14
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <__subsf3>:
 460:	50 58       	subi	r21, 0x80	; 128

00000462 <__addsf3>:
 462:	bb 27       	eor	r27, r27
 464:	aa 27       	eor	r26, r26
 466:	0e d0       	rcall	.+28     	; 0x484 <__addsf3x>
 468:	e5 c0       	rjmp	.+458    	; 0x634 <__fp_round>
 46a:	d6 d0       	rcall	.+428    	; 0x618 <__fp_pscA>
 46c:	30 f0       	brcs	.+12     	; 0x47a <__addsf3+0x18>
 46e:	db d0       	rcall	.+438    	; 0x626 <__fp_pscB>
 470:	20 f0       	brcs	.+8      	; 0x47a <__addsf3+0x18>
 472:	31 f4       	brne	.+12     	; 0x480 <__addsf3+0x1e>
 474:	9f 3f       	cpi	r25, 0xFF	; 255
 476:	11 f4       	brne	.+4      	; 0x47c <__addsf3+0x1a>
 478:	1e f4       	brtc	.+6      	; 0x480 <__addsf3+0x1e>
 47a:	cb c0       	rjmp	.+406    	; 0x612 <__fp_nan>
 47c:	0e f4       	brtc	.+2      	; 0x480 <__addsf3+0x1e>
 47e:	e0 95       	com	r30
 480:	e7 fb       	bst	r30, 7
 482:	c1 c0       	rjmp	.+386    	; 0x606 <__fp_inf>

00000484 <__addsf3x>:
 484:	e9 2f       	mov	r30, r25
 486:	e7 d0       	rcall	.+462    	; 0x656 <__fp_split3>
 488:	80 f3       	brcs	.-32     	; 0x46a <__addsf3+0x8>
 48a:	ba 17       	cp	r27, r26
 48c:	62 07       	cpc	r22, r18
 48e:	73 07       	cpc	r23, r19
 490:	84 07       	cpc	r24, r20
 492:	95 07       	cpc	r25, r21
 494:	18 f0       	brcs	.+6      	; 0x49c <__addsf3x+0x18>
 496:	71 f4       	brne	.+28     	; 0x4b4 <__addsf3x+0x30>
 498:	9e f5       	brtc	.+102    	; 0x500 <__addsf3x+0x7c>
 49a:	ff c0       	rjmp	.+510    	; 0x69a <__fp_zero>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3x+0x1c>
 49e:	e0 95       	com	r30
 4a0:	0b 2e       	mov	r0, r27
 4a2:	ba 2f       	mov	r27, r26
 4a4:	a0 2d       	mov	r26, r0
 4a6:	0b 01       	movw	r0, r22
 4a8:	b9 01       	movw	r22, r18
 4aa:	90 01       	movw	r18, r0
 4ac:	0c 01       	movw	r0, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	a0 01       	movw	r20, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	ff 27       	eor	r31, r31
 4b6:	59 1b       	sub	r21, r25
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <__addsf3x+0x5c>
 4ba:	59 3f       	cpi	r21, 0xF9	; 249
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <__addsf3x+0x4e>
 4be:	50 3e       	cpi	r21, 0xE0	; 224
 4c0:	68 f1       	brcs	.+90     	; 0x51c <__addsf3x+0x98>
 4c2:	1a 16       	cp	r1, r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	a2 2f       	mov	r26, r18
 4c8:	23 2f       	mov	r18, r19
 4ca:	34 2f       	mov	r19, r20
 4cc:	44 27       	eor	r20, r20
 4ce:	58 5f       	subi	r21, 0xF8	; 248
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <__addsf3x+0x34>
 4d2:	46 95       	lsr	r20
 4d4:	37 95       	ror	r19
 4d6:	27 95       	ror	r18
 4d8:	a7 95       	ror	r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	53 95       	inc	r21
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__addsf3x+0x4e>
 4e0:	7e f4       	brtc	.+30     	; 0x500 <__addsf3x+0x7c>
 4e2:	1f 16       	cp	r1, r31
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	62 0b       	sbc	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba f0       	brmi	.+46     	; 0x51c <__addsf3x+0x98>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <__addsf3x+0x96>
 4f2:	ff 0f       	add	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	c2 f7       	brpl	.-16     	; 0x4ee <__addsf3x+0x6a>
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__addsf3x+0x98>
 500:	ba 0f       	add	r27, r26
 502:	62 1f       	adc	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	84 1f       	adc	r24, r20
 508:	48 f4       	brcc	.+18     	; 0x51c <__addsf3x+0x98>
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x96>
 518:	b3 cf       	rjmp	.-154    	; 0x480 <__addsf3+0x1e>
 51a:	93 95       	inc	r25
 51c:	88 0f       	add	r24, r24
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0x9e>
 520:	99 27       	eor	r25, r25
 522:	ee 0f       	add	r30, r30
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	08 95       	ret

0000052a <__fixsfsi>:
 52a:	04 d0       	rcall	.+8      	; 0x534 <__fixunssfsi>
 52c:	68 94       	set
 52e:	b1 11       	cpse	r27, r1
 530:	b5 c0       	rjmp	.+362    	; 0x69c <__fp_szero>
 532:	08 95       	ret

00000534 <__fixunssfsi>:
 534:	98 d0       	rcall	.+304    	; 0x666 <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x26>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	90 f0       	brcs	.+36     	; 0x560 <__fixunssfsi+0x2c>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	a0 f0       	brcs	.+40     	; 0x56c <__fixunssfsi+0x38>
 544:	d1 f0       	breq	.+52     	; 0x57a <__fixunssfsi+0x46>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x22>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x12>
 554:	12 c0       	rjmp	.+36     	; 0x57a <__fixunssfsi+0x46>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	81 f0       	breq	.+32     	; 0x57a <__fixunssfsi+0x46>
 55a:	9f d0       	rcall	.+318    	; 0x69a <__fp_zero>
 55c:	b1 e0       	ldi	r27, 0x01	; 1
 55e:	08 95       	ret
 560:	9c c0       	rjmp	.+312    	; 0x69a <__fp_zero>
 562:	67 2f       	mov	r22, r23
 564:	78 2f       	mov	r23, r24
 566:	88 27       	eor	r24, r24
 568:	b8 5f       	subi	r27, 0xF8	; 248
 56a:	39 f0       	breq	.+14     	; 0x57a <__fixunssfsi+0x46>
 56c:	b9 3f       	cpi	r27, 0xF9	; 249
 56e:	cc f3       	brlt	.-14     	; 0x562 <__fixunssfsi+0x2e>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b3 95       	inc	r27
 578:	d9 f7       	brne	.-10     	; 0x570 <__fixunssfsi+0x3c>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__fixunssfsi+0x56>
 57c:	90 95       	com	r25
 57e:	80 95       	com	r24
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__floatunsisf>:
 58c:	e8 94       	clt
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <__floatsisf+0x12>

00000590 <__floatsisf>:
 590:	97 fb       	bst	r25, 7
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__floatsisf+0x12>
 594:	90 95       	com	r25
 596:	80 95       	com	r24
 598:	70 95       	com	r23
 59a:	61 95       	neg	r22
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	99 23       	and	r25, r25
 5a4:	a9 f0       	breq	.+42     	; 0x5d0 <__floatsisf+0x40>
 5a6:	f9 2f       	mov	r31, r25
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	bb 27       	eor	r27, r27
 5ac:	93 95       	inc	r25
 5ae:	f6 95       	lsr	r31
 5b0:	87 95       	ror	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b7 95       	ror	r27
 5b8:	f1 11       	cpse	r31, r1
 5ba:	f8 cf       	rjmp	.-16     	; 0x5ac <__floatsisf+0x1c>
 5bc:	fa f4       	brpl	.+62     	; 0x5fc <__floatsisf+0x6c>
 5be:	bb 0f       	add	r27, r27
 5c0:	11 f4       	brne	.+4      	; 0x5c6 <__floatsisf+0x36>
 5c2:	60 ff       	sbrs	r22, 0
 5c4:	1b c0       	rjmp	.+54     	; 0x5fc <__floatsisf+0x6c>
 5c6:	6f 5f       	subi	r22, 0xFF	; 255
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ca:	8f 4f       	sbci	r24, 0xFF	; 255
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	16 c0       	rjmp	.+44     	; 0x5fc <__floatsisf+0x6c>
 5d0:	88 23       	and	r24, r24
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__floatsisf+0x48>
 5d4:	96 e9       	ldi	r25, 0x96	; 150
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <__floatsisf+0x6a>
 5d8:	77 23       	and	r23, r23
 5da:	21 f0       	breq	.+8      	; 0x5e4 <__floatsisf+0x54>
 5dc:	9e e8       	ldi	r25, 0x8E	; 142
 5de:	87 2f       	mov	r24, r23
 5e0:	76 2f       	mov	r23, r22
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__floatsisf+0x5e>
 5e4:	66 23       	and	r22, r22
 5e6:	71 f0       	breq	.+28     	; 0x604 <__floatsisf+0x74>
 5e8:	96 e8       	ldi	r25, 0x86	; 134
 5ea:	86 2f       	mov	r24, r22
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	2a f0       	brmi	.+10     	; 0x5fc <__floatsisf+0x6c>
 5f2:	9a 95       	dec	r25
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	da f7       	brpl	.-10     	; 0x5f2 <__floatsisf+0x62>
 5fc:	88 0f       	add	r24, r24
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret

00000606 <__fp_inf>:
 606:	97 f9       	bld	r25, 7
 608:	9f 67       	ori	r25, 0x7F	; 127
 60a:	80 e8       	ldi	r24, 0x80	; 128
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	08 95       	ret

00000612 <__fp_nan>:
 612:	9f ef       	ldi	r25, 0xFF	; 255
 614:	80 ec       	ldi	r24, 0xC0	; 192
 616:	08 95       	ret

00000618 <__fp_pscA>:
 618:	00 24       	eor	r0, r0
 61a:	0a 94       	dec	r0
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	09 06       	cpc	r0, r25
 624:	08 95       	ret

00000626 <__fp_pscB>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	14 06       	cpc	r1, r20
 630:	05 06       	cpc	r0, r21
 632:	08 95       	ret

00000634 <__fp_round>:
 634:	09 2e       	mov	r0, r25
 636:	03 94       	inc	r0
 638:	00 0c       	add	r0, r0
 63a:	11 f4       	brne	.+4      	; 0x640 <__fp_round+0xc>
 63c:	88 23       	and	r24, r24
 63e:	52 f0       	brmi	.+20     	; 0x654 <__fp_round+0x20>
 640:	bb 0f       	add	r27, r27
 642:	40 f4       	brcc	.+16     	; 0x654 <__fp_round+0x20>
 644:	bf 2b       	or	r27, r31
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0x18>
 648:	60 ff       	sbrs	r22, 0
 64a:	04 c0       	rjmp	.+8      	; 0x654 <__fp_round+0x20>
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <__fp_split3>:
 656:	57 fd       	sbrc	r21, 7
 658:	90 58       	subi	r25, 0x80	; 128
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	59 f0       	breq	.+22     	; 0x676 <__fp_splitA+0x10>
 660:	5f 3f       	cpi	r21, 0xFF	; 255
 662:	71 f0       	breq	.+28     	; 0x680 <__fp_splitA+0x1a>
 664:	47 95       	ror	r20

00000666 <__fp_splitA>:
 666:	88 0f       	add	r24, r24
 668:	97 fb       	bst	r25, 7
 66a:	99 1f       	adc	r25, r25
 66c:	61 f0       	breq	.+24     	; 0x686 <__fp_splitA+0x20>
 66e:	9f 3f       	cpi	r25, 0xFF	; 255
 670:	79 f0       	breq	.+30     	; 0x690 <__fp_splitA+0x2a>
 672:	87 95       	ror	r24
 674:	08 95       	ret
 676:	12 16       	cp	r1, r18
 678:	13 06       	cpc	r1, r19
 67a:	14 06       	cpc	r1, r20
 67c:	55 1f       	adc	r21, r21
 67e:	f2 cf       	rjmp	.-28     	; 0x664 <__fp_split3+0xe>
 680:	46 95       	lsr	r20
 682:	f1 df       	rcall	.-30     	; 0x666 <__fp_splitA>
 684:	08 c0       	rjmp	.+16     	; 0x696 <__fp_splitA+0x30>
 686:	16 16       	cp	r1, r22
 688:	17 06       	cpc	r1, r23
 68a:	18 06       	cpc	r1, r24
 68c:	99 1f       	adc	r25, r25
 68e:	f1 cf       	rjmp	.-30     	; 0x672 <__fp_splitA+0xc>
 690:	86 95       	lsr	r24
 692:	71 05       	cpc	r23, r1
 694:	61 05       	cpc	r22, r1
 696:	08 94       	sec
 698:	08 95       	ret

0000069a <__fp_zero>:
 69a:	e8 94       	clt

0000069c <__fp_szero>:
 69c:	bb 27       	eor	r27, r27
 69e:	66 27       	eor	r22, r22
 6a0:	77 27       	eor	r23, r23
 6a2:	cb 01       	movw	r24, r22
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret

000006a8 <__mulsf3>:
 6a8:	0b d0       	rcall	.+22     	; 0x6c0 <__mulsf3x>
 6aa:	c4 cf       	rjmp	.-120    	; 0x634 <__fp_round>
 6ac:	b5 df       	rcall	.-150    	; 0x618 <__fp_pscA>
 6ae:	28 f0       	brcs	.+10     	; 0x6ba <__mulsf3+0x12>
 6b0:	ba df       	rcall	.-140    	; 0x626 <__fp_pscB>
 6b2:	18 f0       	brcs	.+6      	; 0x6ba <__mulsf3+0x12>
 6b4:	95 23       	and	r25, r21
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__mulsf3+0x12>
 6b8:	a6 cf       	rjmp	.-180    	; 0x606 <__fp_inf>
 6ba:	ab cf       	rjmp	.-170    	; 0x612 <__fp_nan>
 6bc:	11 24       	eor	r1, r1
 6be:	ee cf       	rjmp	.-36     	; 0x69c <__fp_szero>

000006c0 <__mulsf3x>:
 6c0:	ca df       	rcall	.-108    	; 0x656 <__fp_split3>
 6c2:	a0 f3       	brcs	.-24     	; 0x6ac <__mulsf3+0x4>

000006c4 <__mulsf3_pse>:
 6c4:	95 9f       	mul	r25, r21
 6c6:	d1 f3       	breq	.-12     	; 0x6bc <__mulsf3+0x14>
 6c8:	95 0f       	add	r25, r21
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	55 1f       	adc	r21, r21
 6ce:	62 9f       	mul	r22, r18
 6d0:	f0 01       	movw	r30, r0
 6d2:	72 9f       	mul	r23, r18
 6d4:	bb 27       	eor	r27, r27
 6d6:	f0 0d       	add	r31, r0
 6d8:	b1 1d       	adc	r27, r1
 6da:	63 9f       	mul	r22, r19
 6dc:	aa 27       	eor	r26, r26
 6de:	f0 0d       	add	r31, r0
 6e0:	b1 1d       	adc	r27, r1
 6e2:	aa 1f       	adc	r26, r26
 6e4:	64 9f       	mul	r22, r20
 6e6:	66 27       	eor	r22, r22
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	66 1f       	adc	r22, r22
 6ee:	82 9f       	mul	r24, r18
 6f0:	22 27       	eor	r18, r18
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	62 1f       	adc	r22, r18
 6f8:	73 9f       	mul	r23, r19
 6fa:	b0 0d       	add	r27, r0
 6fc:	a1 1d       	adc	r26, r1
 6fe:	62 1f       	adc	r22, r18
 700:	83 9f       	mul	r24, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	22 1f       	adc	r18, r18
 708:	74 9f       	mul	r23, r20
 70a:	33 27       	eor	r19, r19
 70c:	a0 0d       	add	r26, r0
 70e:	61 1d       	adc	r22, r1
 710:	23 1f       	adc	r18, r19
 712:	84 9f       	mul	r24, r20
 714:	60 0d       	add	r22, r0
 716:	21 1d       	adc	r18, r1
 718:	82 2f       	mov	r24, r18
 71a:	76 2f       	mov	r23, r22
 71c:	6a 2f       	mov	r22, r26
 71e:	11 24       	eor	r1, r1
 720:	9f 57       	subi	r25, 0x7F	; 127
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	8a f0       	brmi	.+34     	; 0x748 <__mulsf3_pse+0x84>
 726:	e1 f0       	breq	.+56     	; 0x760 <__mulsf3_pse+0x9c>
 728:	88 23       	and	r24, r24
 72a:	4a f0       	brmi	.+18     	; 0x73e <__mulsf3_pse+0x7a>
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	50 40       	sbci	r21, 0x00	; 0
 73c:	a9 f7       	brne	.-22     	; 0x728 <__mulsf3_pse+0x64>
 73e:	9e 3f       	cpi	r25, 0xFE	; 254
 740:	51 05       	cpc	r21, r1
 742:	70 f0       	brcs	.+28     	; 0x760 <__mulsf3_pse+0x9c>
 744:	60 cf       	rjmp	.-320    	; 0x606 <__fp_inf>
 746:	aa cf       	rjmp	.-172    	; 0x69c <__fp_szero>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	ec f3       	brlt	.-6      	; 0x746 <__mulsf3_pse+0x82>
 74c:	98 3e       	cpi	r25, 0xE8	; 232
 74e:	dc f3       	brlt	.-10     	; 0x746 <__mulsf3_pse+0x82>
 750:	86 95       	lsr	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b7 95       	ror	r27
 758:	f7 95       	ror	r31
 75a:	e7 95       	ror	r30
 75c:	9f 5f       	subi	r25, 0xFF	; 255
 75e:	c1 f7       	brne	.-16     	; 0x750 <__mulsf3_pse+0x8c>
 760:	fe 2b       	or	r31, r30
 762:	88 0f       	add	r24, r24
 764:	91 1d       	adc	r25, r1
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	97 f9       	bld	r25, 7
 76c:	08 95       	ret

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
